# Generated by Django 4.2 on 2025-07-15 11:25

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('customer', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('shopify_collection_id', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('handle', models.CharField(blank=True, max_length=255, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shopify_customer_id', models.CharField(blank=True, help_text="Shopify's unique ID for this customer.", max_length=255, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, help_text="Customer's email address (can be null for guest checkouts).", max_length=254, null=True, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, max_length=20, null=True)),
                ('age_range', models.CharField(blank=True, help_text="e.g., '18-24', '25-34', '35-44'.", max_length=20, null=True)),
                ('purchase_style', models.TextField(blank=True, help_text="Describes customer's buying habits, e.g., 'budget-conscious', 'luxury-seeker', 'gift-buyer', 'impulse'.", null=True)),
                ('accepts_marketing', models.BooleanField(default=False, help_text='Does the customer accept marketing emails?')),
                ('total_orders_count', models.PositiveIntegerField(default=0, help_text='Total number of orders placed by this customer.')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount spent by this customer.', max_digits=12)),
                ('created_at', models.DateTimeField(blank=True, help_text='Timestamp when the customer record was created in Shopify.', null=True)),
                ('updated_at', models.DateTimeField(blank=True, help_text='Timestamp when the customer record was last updated in Shopify.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shopify_location_id', models.CharField(blank=True, help_text="Shopify's ID for a physical store location, if applicable.", max_length=255, null=True, unique=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(default='India', max_length=100)),
                ('region', models.CharField(blank=True, help_text='Broader geographical region (e.g., North, South, East, West).', max_length=100, null=True)),
                ('cultural_traits', models.TextField(blank=True, help_text="JSON or text describing local preferences, traditions, festivals, e.g., 'High demand for gold during Diwali'.", null=True)),
                ('population_density', models.IntegerField(blank=True, help_text='Population density of the area.', null=True)),
                ('average_income', models.DecimalField(blank=True, decimal_places=2, help_text='Average income of residents in this location.', max_digits=12, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('shopify_order_id', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('order_number', models.CharField(max_length=100)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('financial_status', models.CharField(blank=True, max_length=50, null=True)),
                ('fulfillment_status', models.CharField(blank=True, max_length=50, null=True)),
                ('currency', models.CharField(blank=True, max_length=10, null=True)),
                ('processed_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('shipping_city', models.CharField(blank=True, max_length=100, null=True)),
                ('shipping_state', models.CharField(blank=True, max_length=100, null=True)),
                ('shipping_country', models.CharField(blank=True, max_length=100, null=True)),
                ('shipping_zip', models.CharField(blank=True, max_length=20, null=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer.customerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ProductOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shopify_option_id', models.CharField(blank=True, help_text="Shopify's ID for this product option.", max_length=255, null=True, unique=True)),
                ('name', models.CharField(help_text="Name of the option (e.g., 'Metal Type', 'Karat', 'Size').", max_length=100)),
                ('position', models.PositiveIntegerField(help_text='Order of the option as defined in Shopify.')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('average_lead_time_days', models.PositiveIntegerField(blank=True, null=True)),
                ('minimum_order_value', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='inventory_quantity',
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='karat',
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='metal_type',
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='price',
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='sku',
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='stone_type',
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='subcategory',
        ),
        migrations.RemoveField(
            model_name='productdetail',
            name='weight_grams',
        ),
        migrations.AddField(
            model_name='productdetail',
            name='handle',
            field=models.CharField(blank=True, help_text='URL slug for the product on Shopify.', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='productdetail',
            name='published_at',
            field=models.DateTimeField(blank=True, help_text='Timestamp when the product was published to sales channels.', null=True),
        ),
        migrations.AddField(
            model_name='productdetail',
            name='shopify_product_id',
            field=models.CharField(blank=True, help_text="Shopify's unique ID for the product.", max_length=255, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='productdetail',
            name='created_at',
            field=models.DateTimeField(help_text='Timestamp when the product was created in Shopify.'),
        ),
        migrations.AlterField(
            model_name='productdetail',
            name='product_type',
            field=models.CharField(help_text="General category like 'Ring', 'Necklace', 'Earrings'.", max_length=50),
        ),
        migrations.AlterField(
            model_name='productdetail',
            name='status',
            field=models.CharField(help_text="Product status: 'active', 'draft', 'archived'.", max_length=50),
        ),
        migrations.AlterField(
            model_name='productdetail',
            name='tags',
            field=models.TextField(blank=True, help_text='Comma-separated string of product tags from Shopify.', null=True),
        ),
        migrations.AlterField(
            model_name='productdetail',
            name='title',
            field=models.CharField(help_text="Main title of the product (e.g., 'Classic Diamond Ring').", max_length=255),
        ),
        migrations.AlterField(
            model_name='productdetail',
            name='updated_at',
            field=models.DateTimeField(help_text='Timestamp when the product was last updated in Shopify.'),
        ),
        migrations.AlterField(
            model_name='productdetail',
            name='vendor',
            field=models.CharField(help_text='Vendor or brand of the product.', max_length=100),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('shopify_transaction_id', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('kind', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('gateway', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField()),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='customer.order')),
            ],
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('shopify_variant_id', models.CharField(help_text="Shopify's unique ID for this product variant.", max_length=255, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(help_text="Full title of the variant (e.g., 'Gold / 14K / Size 7').", max_length=255)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit for this specific variant.', max_length=100, null=True, unique=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Selling price of this variant.', max_digits=12)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost of goods for this variant (CRUCIAL for profitability analysis).', max_digits=12, null=True)),
                ('compare_at_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price for comparison if the item is on sale.', max_digits=12, null=True)),
                ('weight_grams', models.DecimalField(blank=True, decimal_places=2, help_text='Weight of the variant in grams.', max_digits=10, null=True)),
                ('inventory_quantity', models.IntegerField(help_text='Current stock level of this variant.')),
                ('inventory_management', models.CharField(blank=True, help_text="How inventory is managed for this variant (e.g., 'shopify', 'blank').", max_length=50, null=True)),
                ('metal_type', models.CharField(blank=True, help_text="e.g., 'Gold', 'Silver', 'Platinum'.", max_length=50, null=True)),
                ('karat', models.CharField(blank=True, help_text="e.g., '14K', '18K', '22K'.", max_length=10, null=True)),
                ('stone_type', models.CharField(blank=True, help_text="e.g., 'Diamond', 'Ruby', 'Sapphire'.", max_length=50, null=True)),
                ('option1', models.CharField(blank=True, max_length=255, null=True)),
                ('option2', models.CharField(blank=True, max_length=255, null=True)),
                ('option3', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, help_text='Timestamp when the variant was created in Shopify.', null=True)),
                ('updated_at', models.DateTimeField(blank=True, help_text='Timestamp when the variant was last updated in Shopify.', null=True)),
                ('product', models.ForeignKey(help_text='The parent product this variant belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='customer.productdetail')),
            ],
        ),
        migrations.CreateModel(
            name='ProductOptionValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(help_text="Specific value of the option (e.g., 'Gold', 'Silver', '14K', '18K', '7', '8').", max_length=100)),
                ('position', models.PositiveIntegerField(help_text='Order of the value within its option.')),
                ('option', models.ForeignKey(help_text='The product option this value belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='values', to='customer.productoption')),
            ],
        ),
        migrations.AddField(
            model_name='productoption',
            name='product',
            field=models.ForeignKey(help_text='The product this option belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='options', to='customer.productdetail'),
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shopify_image_id', models.CharField(help_text="Shopify's unique ID for the image.", max_length=255, unique=True)),
                ('src', models.URLField(help_text='URL of the product image.', max_length=500)),
                ('alt', models.CharField(blank=True, help_text='Alt text for the image.', max_length=255, null=True)),
                ('position', models.PositiveIntegerField(blank=True, help_text="Order of the image in Shopify's product gallery.", null=True)),
                ('variant_ids', models.TextField(blank=True, help_text='JSON string or comma-separated list of Shopify variant IDs this image represents.', null=True)),
                ('product', models.ForeignKey(help_text='The product this image belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='customer.productdetail')),
            ],
        ),
        migrations.CreateModel(
            name='OrderLineItem',
            fields=[
                ('shopify_line_item_id', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('variant_title', models.CharField(blank=True, max_length=255, null=True)),
                ('quantity', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total_discount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('sku', models.CharField(blank=True, max_length=100, null=True)),
                ('properties', models.TextField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='customer.order')),
                ('product_detail', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer.productdetail')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer.productvariant')),
            ],
        ),
        migrations.CreateModel(
            name='LocalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('event_type', models.CharField(choices=[('festival', 'Festival'), ('public_holiday', 'Public Holiday'), ('local_sale_event', 'Local Sale Event'), ('season', 'Season'), ('strike', 'Strike'), ('weather_event', 'Weather Event'), ('economic_event', 'Economic Event'), ('other', 'Other')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('influence', models.TextField(blank=True, null=True)),
                ('demand_score', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer.location')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_type', models.CharField(choices=[('restock', 'Restock'), ('damage', 'Damage'), ('return', 'Return'), ('adjustment', 'Adjustment'), ('transfer_in', 'Transfer In'), ('transfer_out', 'Transfer Out'), ('lost', 'Lost'), ('theft', 'Theft')], max_length=20)),
                ('quantity', models.IntegerField()),
                ('reason', models.TextField(blank=True, null=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('product_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.productvariant')),
            ],
        ),
        migrations.AddField(
            model_name='customerprofile',
            name='location',
            field=models.ForeignKey(blank=True, help_text='Inferred location of the customer based on shipping/billing address.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer.location'),
        ),
        migrations.CreateModel(
            name='ProductSupplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_sku', models.CharField(blank=True, max_length=100, null=True)),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('lead_time_days', models.PositiveIntegerField(blank=True, null=True)),
                ('minimum_order_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('product_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.productvariant')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.supplier')),
            ],
            options={
                'unique_together': {('product_variant', 'supplier')},
            },
        ),
        migrations.CreateModel(
            name='ProductCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.collection')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer.productdetail')),
            ],
            options={
                'unique_together': {('product', 'collection')},
            },
        ),
    ]
